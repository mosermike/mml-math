<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="functions_8cpp" kind="file" language="C++">
    <compoundname>functions.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">math.h</includes>
    <includes local="no">limits</includes>
    <includes local="no">mml.hpp</includes>
    <includes refid="functions_8hpp" local="yes">../include/mml-math/functions.hpp</includes>
    <includes refid="constants_8hpp" local="yes">../include/mml-math/constants.hpp</includes>
    <incdepgraph>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="6">
        <label>mml.hpp</label>
      </node>
      <node id="8">
        <label>../include/mml-math/constants.hpp</label>
        <link refid="constants_8hpp"/>
      </node>
      <node id="3">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>../include/mml-math/functions.hpp</label>
        <link refid="functions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>math.h</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>src/functions.cpp</label>
        <link refid="functions_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mml.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/mml-math/functions.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/mml-math/constants.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">mml::string<sp/><ref refid="namespacemml_1_1math_1a2a36b3bac66cde5568547b3ad798e5bd" kindref="member">mml::math::replace</ref>(mml::string<sp/>equation,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(verbose)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[replace]<sp/>Process<sp/>equation<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>equation<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>,<sp/>with<sp/>.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>******************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Replace<sp/>physical<sp/>constants<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>******************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_a0&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1ad82f461176324fe9b53960915169af71" kindref="member">P_a0</ref>).c_str());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_c&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1a335893bb60e8a5d3a6d197ca99d66a39" kindref="member">P_c</ref>).c_str());</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_mu&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1a2625f62bfcd6804eb1100905bfb123c0" kindref="member">P_mu</ref>).c_str());</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_eps&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1aacf8baf7f4cae88160cb1190455d8d94" kindref="member">P_eps</ref>).c_str());</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_e&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1abcac4a1d59e688627879ce4d46e4ad7b" kindref="member">P_e</ref>).c_str());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_k&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1aece4b668dfc150361219bd54437c1e64" kindref="member">P_k</ref>).c_str());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_h&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1ae36e4286cb081862303f1aefe141e7ce" kindref="member">P_h</ref>).c_str());</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_m&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1a2dc997c1aa01cd713247385b7eace11e" kindref="member">P_m</ref>).c_str());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_G&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1a0fa286a619ee028391743a06f25e3cad" kindref="member">P_G</ref>).c_str());</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_u&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1adb17e00199c45b0dd8be6a4f51673c69" kindref="member">P_u</ref>).c_str());</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;P_NA&quot;</highlight><highlight class="normal">,<sp/>std::to_string(<ref refid="constants_8hpp_1acdd7a8183a951761a5bdf25a1fc246d7" kindref="member">P_NA</ref>).c_str());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>**********************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Replace<sp/>mathematical<sp/>constants<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>**********************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;M_Pi&quot;</highlight><highlight class="normal">,std::to_string(M_PI).c_str());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.replace(</highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">,std::to_string(M_PI).c_str());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>e<sp/>if<sp/>there<sp/>is<sp/>an<sp/>operator<sp/>before<sp/>and<sp/>after<sp/>the<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>equation.find(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">);<sp/>i<sp/>&lt;<sp/>equation.size();<sp/>i++){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(equation[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(verbose)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[replace]<sp/>Detected<sp/>&apos;e&apos;<sp/>at<sp/>position<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e<sp/>at<sp/>the<sp/>beginning<sp/>but<sp/>not<sp/>part<sp/>of<sp/>exp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>equation[i+1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>mml::to_string(M_E)<sp/>+<sp/>equation.substr(1);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!mml::is_num(equation[i-1])<sp/>&amp;&amp;<sp/>i<sp/>==<sp/>equation.size()-1)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.sub(0,i-1)<sp/>+<sp/>mml::to_string(M_E);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e<sp/>somewhere<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!mml::is_num(equation[i-1])<sp/>&amp;&amp;<sp/>(!std::isalnum(equation[i+1])))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>equation<sp/>=<sp/>equation.sub(0,i-1)<sp/>+<sp/>mml::to_string(M_E)<sp/>+<sp/>equation.substr(i+1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>next<sp/>e<sp/>in<sp/>the<sp/>equation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>equation.find(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,i+1)<sp/>-1;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(verbose)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[replace]<sp/>Replaced<sp/>all<sp/>constants:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>equation<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>equation;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/functions.cpp"/>
  </compounddef>
</doxygen>
