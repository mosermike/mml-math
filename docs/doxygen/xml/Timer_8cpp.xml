<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Timer_8cpp" kind="file" language="C++">
    <compoundname>Timer.cpp</compoundname>
    <includes local="no">chrono</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">ostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iomanip</includes>
    <includes refid="Timer_8hpp" local="yes">mml/Timer.hpp</includes>
    <includes refid="standards_8hpp" local="yes">mml/standards.hpp</includes>
    <incdepgraph>
      <node id="6">
        <label>iomanip</label>
      </node>
      <node id="13">
        <label>float.h</label>
      </node>
      <node id="1">
        <label>src/Timer.cpp</label>
        <link refid="Timer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="15">
        <label>mml/definitions.hpp</label>
        <link refid="definitions_8hpp"/>
      </node>
      <node id="4">
        <label>ostream</label>
      </node>
      <node id="12">
        <label>random</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="5">
        <label>sstream</label>
      </node>
      <node id="8">
        <label>mml/standards.hpp</label>
        <link refid="standards_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>chrono</label>
      </node>
      <node id="7">
        <label>mml/Timer.hpp</label>
        <link refid="Timer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structmml_1_1Timer_1_1time" prot="public">mml::Timer::time</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="Timer_8cpp_1a8c64f1849169fec46f30321ccbbf9848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(mml::Timer &amp;t, std::ostream &amp;os)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classmml_1_1Timer" kindref="compound">mml::Timer</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Timer.cpp" line="164" column="1" bodyfile="src/Timer.cpp" bodystart="164" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Timer_8hpp" kindref="compound">mml/Timer.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="standards_8hpp" kindref="compound">mml/standards.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">std::chrono::high_resolution_clock::time_point<sp/>mml::Timer::_now()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1Timer_1ad95a6cccf71bdcb1753affecb16ec19b" kindref="member">mml::Timer::break_start</ref>()<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ticksEnd<sp/>=<sp/>_now();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break_time_mus<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(ticksEnd<sp/>-<sp/>ticksStart).count()<sp/>-<sp/>break_time_mus;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1Timer_1a13ab728d658a504ce2e39d47ff06a230" kindref="member">mml::Timer::break_stop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ticksEnd<sp/>=<sp/>_now();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break_time_mus<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(ticksEnd<sp/>-<sp/>ticksStart).count()<sp/>-<sp/>break_time_mus;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1Timer_1a33c476f593ac89d840660a4bdddf7828" kindref="member">mml::Timer::cout</ref>(std::string<sp/>text,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>format_print,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newline)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>ticksEnd<sp/>=<sp/>_now();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>text;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(format_print)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/><ref refid="namespacemml_1a1d79d75734ea118c10fc391ab2231d56" kindref="member">range</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>stop()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ms&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newline)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1Timer_1a5be128b48dd7e5ccd73935b5d9cb639b" kindref="member">mml::Timer::start</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>ticksStart<sp/>=<sp/>_now();</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1Timer_1aa33d1da476db3f9e46796f5875a8346b" kindref="member">mml::Timer::stop</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>ticksEnd<sp/>=<sp/>_now();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(ticksEnd<sp/>-<sp/>ticksStart).count()<sp/>/<sp/>1000.0<sp/>-<sp/>break_time_mus<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">uint64_t<sp/><ref refid="classmml_1_1Timer_1acbc5feb01146cf9067c08c52991300d4" kindref="member">mml::Timer::getUS</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stop)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ticksEnd<sp/>=<sp/>_now();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(ticksEnd<sp/>-<sp/>ticksStart).count()<sp/>-<sp/>break_time_mus;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1Timer_1a7ab3c31ff55f77a5fb16740df5d056c1" kindref="member">mml::Timer::getMS</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stop)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ticksEnd<sp/>=<sp/>_now();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(ticksEnd<sp/>-<sp/>ticksStart).count()<sp/>/<sp/>1000.0<sp/><sp/>-<sp/>break_time_mus<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1Timer_1a5138fe5353603b4fd5d12dfa5e0f6a22" kindref="member">mml::Timer::getS</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stop)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ticksEnd<sp/>=<sp/>_now();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(ticksEnd<sp/>-<sp/>ticksStart).count()<sp/>/<sp/>1000000.0<sp/>-<sp/><sp/>-<sp/>break_time_mus<sp/>/<sp/>1000000.0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">std::string<sp/><ref refid="classmml_1_1Timer_1a72f8a2da44ec59a76ac7884e2db9352c" kindref="member">mml::Timer::toString</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(stop())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1Timer_1a1857a5be5649d7d640d89fa7e22763c5" kindref="member">mml::Timer::toInt</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(stop()<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structmml_1_1Timer_1_1time" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmml_1_1Timer_1_1time" kindref="compound">mml::Timer::time</ref>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmml_1_1Timer_1_1time_1a7c172c1fcfbe0cec0b61779a7b043939" kindref="member">hour</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmml_1_1Timer_1_1time_1a60cd200f356c67c734151223b207b020" kindref="member">minute</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmml_1_1Timer_1_1time_1a6190991cf408697e03b5d62c9fb39a26" kindref="member">second</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmml_1_1Timer_1_1time_1ae133dc0013e7e3f980cae478e59c4e10" kindref="member">miliseconds</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmml_1_1Timer_1_1time_1aaee92b490e609704efa02d978205fef5" kindref="member">microseconds</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">std::string<sp/><ref refid="classmml_1_1Timer_1aeadb046285a068a189a4359e9302ed3e" kindref="member">mml::Timer::clock</ref>()<sp/>noexcept{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>ticks<sp/>=<sp/>stop();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref><sp/><sp/><sp/><sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ret<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a7c172c1fcfbe0cec0b61779a7b043939" kindref="member">hour</ref><sp/>=<sp/>ticks<sp/>/<sp/>(1000*60*60);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a60cd200f356c67c734151223b207b020" kindref="member">minute</ref><sp/>=<sp/>ticks<sp/>/<sp/>(1000*60)<sp/>-<sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a7c172c1fcfbe0cec0b61779a7b043939" kindref="member">hour</ref><sp/>*<sp/>60;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a6190991cf408697e03b5d62c9fb39a26" kindref="member">second</ref><sp/>=<sp/>ticks<sp/>/<sp/>(1000)<sp/>-<sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a60cd200f356c67c734151223b207b020" kindref="member">minute</ref><sp/>*<sp/>60<sp/>-<sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a7c172c1fcfbe0cec0b61779a7b043939" kindref="member">hour</ref><sp/>*<sp/>60<sp/>*<sp/>60;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1ae133dc0013e7e3f980cae478e59c4e10" kindref="member">miliseconds</ref><sp/>=<sp/>ticks<sp/>-<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a6190991cf408697e03b5d62c9fb39a26" kindref="member">second</ref><sp/>*<sp/>1000<sp/>-<sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a60cd200f356c67c734151223b207b020" kindref="member">minute</ref><sp/>*1000<sp/>*<sp/>60<sp/>-<sp/><ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a7c172c1fcfbe0cec0b61779a7b043939" kindref="member">hour</ref><sp/>*1000<sp/>*<sp/>60<sp/>*<sp/>60;<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Formatierungen<sp/>zur<sp/>Form<sp/>00:00:00,000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a7c172c1fcfbe0cec0b61779a7b043939" kindref="member">hour</ref><sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a7c172c1fcfbe0cec0b61779a7b043939" kindref="member">hour</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a7c172c1fcfbe0cec0b61779a7b043939" kindref="member">hour</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a60cd200f356c67c734151223b207b020" kindref="member">minute</ref><sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a60cd200f356c67c734151223b207b020" kindref="member">minute</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a60cd200f356c67c734151223b207b020" kindref="member">minute</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a6190991cf408697e03b5d62c9fb39a26" kindref="member">second</ref><sp/>&lt;<sp/>10)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a6190991cf408697e03b5d62c9fb39a26" kindref="member">second</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1a6190991cf408697e03b5d62c9fb39a26" kindref="member">second</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(<ref refid="structmml_1_1Timer_1_1time" kindref="compound">time</ref>.<ref refid="structmml_1_1Timer_1_1time_1ae133dc0013e7e3f980cae478e59c4e10" kindref="member">miliseconds</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">std::string<sp/><ref refid="classmml_1_1Timer_1a901cde7e7108eb41a97da7e3835844d8" kindref="member">mml::Timer::range</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>time<sp/>time;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>time.<ref refid="structmml_1_1Timer_1_1time_1ae133dc0013e7e3f980cae478e59c4e10" kindref="member">miliseconds</ref><sp/><sp/><sp/><sp/>=<sp/>getMS();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>time.microseconds<sp/><sp/><sp/>=<sp/>getUS(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>second<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>getS(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(time.microseconds<sp/>&lt;<sp/>10000)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(time.microseconds)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mus&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(time.miliseconds<sp/>&lt;<sp/>1000)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(time.miliseconds)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ms&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(second<sp/>&lt;<sp/>60<sp/>)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">std::to_string</ref>(second).<ref refid="classmml_1_1string_1a71a3dae3f16e17a67c213ee643a80587" kindref="member">substr</ref>(0,5)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clock();</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">std::ostream&amp;<sp/><ref refid="Timer_8cpp_1a8c64f1849169fec46f30321ccbbf9848" kindref="member">operator&lt;&lt;</ref>(<ref refid="classmml_1_1Timer" kindref="compound">mml::Timer</ref>&amp;<sp/>t,<sp/>std::ostream&amp;<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>t.<ref refid="classmml_1_1Timer_1a72f8a2da44ec59a76ac7884e2db9352c" kindref="member">toString</ref>();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Timer.cpp"/>
  </compounddef>
</doxygen>
